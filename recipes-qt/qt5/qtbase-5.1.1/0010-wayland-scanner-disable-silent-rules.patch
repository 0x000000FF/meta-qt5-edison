From 9a2219a25247b76de6524d358211b55467305d11 Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Sun, 5 May 2013 11:18:34 +0200
Subject: [PATCH 10/22] wayland-scanner: disable silent rules

* for some reason "$$qtwayland-server-header.commands" on second line gets expanded as -server-header.commands

Upstream-Status: Pending

Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 mkspecs/features/wayland-scanner.prf | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/mkspecs/features/wayland-scanner.prf b/mkspecs/features/wayland-scanner.prf
index b2eca41..46da374 100644
--- a/mkspecs/features/wayland-scanner.prf
+++ b/mkspecs/features/wayland-scanner.prf
@@ -10,7 +10,7 @@ wayland_server_header.input = WAYLANDSERVERSOURCES
 wayland_server_header.variable_out = HEADERS
 wayland_server_header.output = wayland-${QMAKE_FILE_BASE}-server-protocol$${first(QMAKE_EXT_H)}
 wayland_server_header.commands = $$QMAKE_WAYLAND_SCANNER server-header < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:wayland_server_header.commands = @echo Wayland server header ${QMAKE_FILE_IN} && $$wayland_server_header.commands
+#silent:wayland_server_header.commands = @echo Wayland server header ${QMAKE_FILE_IN} && $$wayland_server_header.commands
 QMAKE_EXTRA_COMPILERS += wayland_server_header
 
 wayland_client_header.name = wayland ${QMAKE_FILE_BASE}
@@ -18,7 +18,7 @@ wayland_client_header.input = WAYLANDCLIENTSOURCES
 wayland_client_header.variable_out = HEADERS
 wayland_client_header.output = wayland-${QMAKE_FILE_BASE}-client-protocol$${first(QMAKE_EXT_H)}
 wayland_client_header.commands = $$QMAKE_WAYLAND_SCANNER client-header < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:wayland_client_header.commands = @echo Wayland client header ${QMAKE_FILE_IN} && $$wayland_client_header.commands
+#silent:wayland_client_header.commands = @echo Wayland client header ${QMAKE_FILE_IN} && $$wayland_client_header.commands
 QMAKE_EXTRA_COMPILERS += wayland_client_header
 
 wayland_code.name = wayland ${QMAKE_FILE_BASE}
@@ -26,7 +26,7 @@ wayland_code.input = WAYLANDCLIENTSOURCES WAYLANDSERVERSOURCES
 wayland_code.variable_out = SOURCES
 wayland_code.output = wayland-${QMAKE_FILE_BASE}-protocol.c
 wayland_code.commands = $$QMAKE_WAYLAND_SCANNER code < ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:wayland_code.commands = @echo Wayland code header ${QMAKE_FILE_IN} && $$wayland_code.commands
+#silent:wayland_code.commands = @echo Wayland code header ${QMAKE_FILE_IN} && $$wayland_code.commands
 QMAKE_EXTRA_COMPILERS += wayland_code
 
 qtPrepareTool(QMAKE_QTWAYLANDSCANNER, qtwaylandscanner)
@@ -37,7 +37,7 @@ qtwayland_client_header.variable_out = HEADERS
 qtwayland_client_header.depends = wayland-${QMAKE_FILE_BASE}-client-protocol$${first(QMAKE_EXT_H)}
 qtwayland_client_header.output = qwayland-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
 qtwayland_client_header.commands = $$QMAKE_QTWAYLANDSCANNER client-header ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:qtwayland_client_header.commands = @echo QtWayland client header ${QMAKE_FILE_IN} && $$qtwayland_client_header.commands
+#silent:qtwayland_client_header.commands = @echo QtWayland client header ${QMAKE_FILE_IN} && $$qtwayland_client_header.commands
 QMAKE_EXTRA_COMPILERS += qtwayland_client_header
 
 qtwayland_client_code.name = qtwayland ${QMAKE_FILE_BASE}
@@ -46,7 +46,7 @@ qtwayland_client_code.variable_out = SOURCES
 qtwayland_client_code.depends = qwayland-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
 qtwayland_client_code.output = qwayland-${QMAKE_FILE_BASE}.cpp
 qtwayland_client_code.commands = $$QMAKE_QTWAYLANDSCANNER client-code ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:qtwayland_client_code.commands = @echo QtWayland client code ${QMAKE_FILE_IN} && $$qtwayland_client_code.commands
+#silent:qtwayland_client_code.commands = @echo QtWayland client code ${QMAKE_FILE_IN} && $$qtwayland_client_code.commands
 QMAKE_EXTRA_COMPILERS += qtwayland_client_code
 
 qtwayland_server_header.name = qtwayland ${QMAKE_FILE_BASE}
@@ -55,7 +55,7 @@ qtwayland_server_header.variable_out = HEADERS
 qtwayland_server_header.depends = wayland-${QMAKE_FILE_BASE}-server-protocol$${first(QMAKE_EXT_H)}
 qtwayland_server_header.output = qwayland-server-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
 qtwayland_server_header.commands = $$QMAKE_QTWAYLANDSCANNER server-header ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:qtwayland_server_header.commands = @echo QtWayland server header ${QMAKE_FILE_IN} && $$qtwayland_server_header.commands
+#silent:qtwayland_server_header.commands = @echo QtWayland server header ${QMAKE_FILE_IN} && $$qtwayland_server_header.commands
 QMAKE_EXTRA_COMPILERS += qtwayland_server_header
 
 qtwayland_server_code.name = qtwayland ${QMAKE_FILE_BASE}
@@ -64,5 +64,5 @@ qtwayland_server_code.variable_out = SOURCES
 qtwayland_server_code.depends = qwayland-server-${QMAKE_FILE_BASE}$${first(QMAKE_EXT_H)}
 qtwayland_server_code.output = qwayland-server-${QMAKE_FILE_BASE}.cpp
 qtwayland_server_code.commands = $$QMAKE_QTWAYLANDSCANNER server-code ${QMAKE_FILE_IN} > ${QMAKE_FILE_OUT}
-silent:qtwayland_server_code.commands = @echo QtWayland server code ${QMAKE_FILE_IN} && $$qtwayland_server_code.commands
+#silent:qtwayland_server_code.commands = @echo QtWayland server code ${QMAKE_FILE_IN} && $$qtwayland_server_code.commands
 QMAKE_EXTRA_COMPILERS += qtwayland_server_code
-- 
1.8.3.1

